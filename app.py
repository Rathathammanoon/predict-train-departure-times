import streamlit as st
import matplotlib.pyplot as plt
import warnings
from components.data_processor import load_and_preprocess_data
from components.model_trainer import train_model
from components.predictor import predict_single_input
from components.ui_components import render_train_input_form
import pickle
import os

warnings.filterwarnings('ignore')
plt.rcParams['font.family'] = 'Tahoma'

def main():
    st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü", page_icon="üöÇ", layout="wide")

    st.title("üöÇ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")
    st.markdown("---")

    st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
    page = st.sidebar.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤",
        ["‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤", "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"]
    )

    if page == "‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•":
        render_training_page()
    elif page == "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤":
        render_prediction_page()
    elif page == "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö":
        render_about_page()

def render_training_page():
    st.header("üß† ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx)", type=["xlsx"])

    if uploaded_file is not None:
        df = load_and_preprocess_data(uploaded_file)
        if df is not None:
            st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
            st.dataframe(df.head())

            default_features = [
                'Train_type',
                'Date',
                'Train_number',
                'Maximum_delay',
                'Outbound_trips_Return_trips',
                'Number_of_stations',
                'Number_of_junctions',
                'Railway_line',
                'Total_delay_time',
                'Departure_delay_origin',
                'Number_of_delayed_stations',
                'Time_period',
                'Maximum_train_speed',
                'Actual_departure_time_origin',
                'Actual_arrival_time_destination',
                'Scheduled_departure_time_origin',
                'Scheduled_arrival_time_destination',
                'Maximum_train_speed',
                'Distance'
            ]

            features = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features",
                df.columns.tolist(),
                default=list(set(default_features).intersection(set(df.columns.tolist())))
            )

            target = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Target (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)",
                df.columns.tolist(),
                index=df.columns.tolist().index("Arrival_delay_destination") if "Arrival_delay_destination" in df.columns else 0
            )

            if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
                model, label_encoders, feature_cols = train_model(df, features, target)

def render_prediction_page():
    st.header("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")

    model_exists = os.path.exists('train_model.pkl') and os.path.exists('label_encoders.pkl')
    if not model_exists:
        st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•' ‡∏Å‡πà‡∏≠‡∏ô")
        return

    try:
        with open('train_model.pkl', 'rb') as f:
            model = pickle.load(f)
        with open('label_encoders.pkl', 'rb') as f:
            label_encoders = pickle.load(f)

        st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        input_data = render_train_input_form()

        if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤"):
            prediction = predict_single_input(model, label_encoders, input_data, model.feature_names_in_)
            st.success(f"üïí ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏£‡∏ñ‡πÑ‡∏ü‡∏à‡∏∞‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {prediction:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ")

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")
        print(e)

def render_about_page():
    st.header("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")
    # Add your about page content here...

if __name__ == "__main__":
    main()