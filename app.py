import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from datetime import datetime, timedelta
import pickle
import os
import warnings

warnings.filterwarnings('ignore')

plt.rcParams['font.family'] = 'Tahoma'


def load_and_preprocess_data(file_path):
    try:
        xls = pd.ExcelFile(file_path)
        st.success(f"üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {', '.join(xls.sheet_names)}")
        df = pd.read_excel(xls, 'report', engine='openpyxl')
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {df.shape[0]} ‡πÅ‡∏ñ‡∏ß ‡πÅ‡∏•‡∏∞ {df.shape[1]} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")

        time_columns = ['Scheduled_departure_time_origin', 'Scheduled_arrival_time_destination',
                        'Actual_departure_time_origin', 'Actual_arrival_time_destination']
        for col in time_columns:
            if col in df.columns:
                if df[col].dtype == 'object':
                    try:
                        df[col] = pd.to_datetime(df[col], errors='coerce')
                    except:
                        st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col} ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ")
        return df
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None


def preprocess_features(df, features):
    X = df[features].copy()
    categorical_cols = X.select_dtypes(include=['object', 'category']).columns
    label_encoders = {}

    for col in categorical_cols:
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col].astype(str))
        label_encoders[col] = le

    datetime_cols = X.select_dtypes(include=['datetime64']).columns
    for col in datetime_cols:
        X[f"{col}_hour"] = X[col].dt.hour
        X[f"{col}_minute"] = X[col].dt.minute
        X.drop(col, axis=1, inplace=True)

    return X, label_encoders


def train_model(df, features, target):
    st.info("üöÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest...")

    X, label_encoders = preprocess_features(df, features)
    y = df[target]

    if pd.api.types.is_datetime64_any_dtype(y):
        y = y.dt.hour * 60 + y.dt.minute

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)

    st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

    with open('train_model.pkl', 'wb') as f:
        pickle.dump(model, f)

    with open('label_encoders.pkl', 'wb') as f:
        pickle.dump(label_encoders, f)

    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    return model, label_encoders, X.columns


def predict_single_input(model, label_encoders, input_features, feature_columns):
    input_df = pd.DataFrame([input_features])

    if 'Date' in input_df.columns:
        input_df['Date'] = pd.to_datetime(input_df['Date'])

    time_columns = ['Scheduled_departure_time_origin', 'Scheduled_arrival_time_destination']
    for col in time_columns:
        if col in input_df.columns:
            if isinstance(input_df[col][0], str):
                current_date = input_df["Date"][0] if "Date" in input_df.columns else datetime.now().date()
                combined_datetime = datetime.combine(current_date, input_df[col][0])
                input_df[col] = pd.to_datetime([combined_datetime])
            else:
                input_df[col] = pd.to_datetime(input_df[col])

    for col, le in label_encoders.items():
        if col in input_df.columns:
            try:
                input_df[col] = le.transform(input_df[col].astype(str))
            except:
                st.warning(f"‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ {input_df[col][0]} ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col} ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô")
                input_df[col] = 0

    datetime_cols = input_df.select_dtypes(include=['datetime64']).columns
    for col in datetime_cols:
        input_df[f"{col}_hour"] = input_df[col].dt.hour
        input_df[f"{col}_minute"] = input_df[col].dt.minute
        input_df.drop(col, axis=1, inplace=True)

    missing_cols = set(feature_columns) - set(input_df.columns)

    for col in missing_cols:
        input_df[col] = 0

    input_df = input_df[feature_columns]

    prediction = model.predict(input_df)[0]

    return prediction


def main():
    st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü", page_icon="üöÇ", layout="wide")

    st.title("üöÇ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")
    st.markdown("---")

    st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
    page = st.sidebar.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤",
        ["‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤", "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"]
    )

    if page == "‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•":
        st.header("üß† ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")

        uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx)", type=["xlsx"])

        if uploaded_file is not None:
            df = load_and_preprocess_data(uploaded_file)

            if df is not None:
                st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
                st.dataframe(df.head())

                st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features ‡πÅ‡∏•‡∏∞ Target")

                default_features = ['Train_type', 'Maximum_train_speed', 'Number_of_junctions',
                                    'Outbound_trips_Return_trips', 'Train_number',
                                    'Scheduled_departure_time_origin', 'Scheduled_arrival_time_destination',
                                    'Railway_line', 'Date', 'Distance', 'Number_of_stations', 'Time_period']

                features = st.multiselect(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features",
                    df.columns.tolist(),
                    default=list(set(default_features).intersection(set(df.columns.tolist())))
                )

                target = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Target (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)",
                    df.columns.tolist(),
                    index=df.columns.tolist().index(
                        "Arrival_delay_destination") if "Arrival_delay_destination" in df.columns else 0
                )

                if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
                    model, label_encoders, feature_cols = train_model(df, features, target)

                    st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Features")
                    feature_imp = pd.DataFrame(sorted(zip(model.feature_importances_, feature_cols)),
                                               columns=['Value', 'Feature'])
                    feature_imp = feature_imp.sort_values(by="Value", ascending=False)

                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.barplot(x="Value", y="Feature", data=feature_imp.head(10), ax=ax)
                    ax.set_title("Top 10 Feature Importance")
                    st.pyplot(fig)

                    with open('train_model.pkl', 'rb') as f:
                        model_data = f.read()

                    st.download_button(
                        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•",
                        data=model_data,
                        file_name="train_model.pkl",
                        mime="application/octet-stream"
                    )

                    with open('label_encoders.pkl', 'rb') as f:
                        encoders_data = f.read()

                    st.download_button(
                        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Label Encoders",
                        data=encoders_data,
                        file_name="label_encoders.pkl",
                        mime="application/octet-stream"
                    )

    elif page == "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤":
        st.header("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")

        model_exists = os.path.exists('train_model.pkl') and os.path.exists('label_encoders.pkl')
        if not model_exists:
            st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•' ‡∏Å‡πà‡∏≠‡∏ô")
            model_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• (.pkl)", type=["pkl"])
            encoders_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Label Encoders (.pkl)", type=["pkl"])
            if model_file and encoders_file:
                with open('train_model.pkl', 'wb') as f:
                    f.write(model_file.getbuffer())
                with open('label_encoders.pkl', 'wb') as f:
                    f.write(encoders_file.getbuffer())
                st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                model_exists = True
                st.experimental_rerun()

        if model_exists:
            try:
                with open('train_model.pkl', 'rb') as f:
                    model = pickle.load(f)
                with open('label_encoders.pkl', 'rb') as f:
                    label_encoders = pickle.load(f)

                st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

                col1, col2 = st.columns(2)

                # Column ‡∏ã‡πâ‡∏≤‡∏¢
                with col1:
                    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü
                    train_types_dict = {
                        "‡∏£‡∏ñ‡∏î‡πà‡∏ß‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©": 1,
                        "‡∏£‡∏ñ‡∏î‡πà‡∏ß‡∏ô": 2,
                        "‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß": 3,
                        "‡∏£‡∏ñ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤": 4,
                        "‡∏ä‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á": 5,
                        "‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô": 6,
                        "‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ä‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á": 7,
                        "‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£": 8,
                        "‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß": 9,
                        "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": 0,
                        "‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡πà‡∏≤": 11,
                        "‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß": 12,
                        "‡∏û‡∏¥‡πÄ‡∏®‡∏©": 13,
                        "‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢": 14,
                    }
                    train_type_display = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡πÑ‡∏ü", list(train_types_dict.keys()))
                    train_type = train_types_dict[train_type_display]

                    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                    max_speed_dict = {
                        "60": 60,
                        "100": 100,
                        "120": 120,
                        "160": 160,
                    }
                    max_speed_display = st.selectbox("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", list(max_speed_dict.keys()))
                    max_speed = max_speed_dict[max_speed_display]

                    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å
                    num_junctions = st.number_input(
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å",
                        min_value=0, max_value=5, value=0
                    )

                    # ‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                    outbound_return_dict = {
                        "‡∏Ç‡∏≤‡πÑ‡∏õ": 1,
                        "‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö": 2,
                    }
                    outbound_return_display = st.selectbox("‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", list(outbound_return_dict.keys()))
                    outbound_return = outbound_return_dict[outbound_return_display]

                    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ö‡∏ß‡∏ô‡∏£‡∏ñ‡πÑ‡∏ü
                    train_number_dict = {
                        '7': 7, '8': 8, '9': 9, '10': 10, '13': 13, '14': 14, '21': 21, '22': 22,
                        '23': 23, '25': 25, '26': 26, '31': 31, '32': 32, '37': 37, '38': 38,
                        '39': 39, '40': 40, '43': 43, '45': 45, '46': 46, '51': 51, '71': 71,
                        '75': 75, '76': 76, '83': 83, '84': 84, '85': 85,
                        '86': 86, '102': 102, '107': 107, '109': 109, '111': 111,
                        '112': 112, '133': 133, '134': 134, '135': 135, '136': 136,
                        '139': 139, '140': 140, '141': 141, '142': 142, '147': 147,
                        '148': 148, '167': 167, '168': 168, '169': 169, '170': 170,
                        '171': 171, '172': 172, '201': 201, '202': 202, '207': 207,
                        '208': 208, '209': 209, '210': 210, '211': 211, '212': 212,
                        '233': 233, '234': 234, '251': 251, '252': 252, '254': 254,
                        '255': 255, '257': 257, '258': 258, '259': 259, '260': 260,
                        '261': 261, '262': 262, '275': 275, '276': 276, '277': 277,
                        '278': 278, '279': 279, '280': 280, '281': 281, '282': 282,
                        '283': 283, '284': 284, '301': 301, '302': 302, '303': 303,
                        '304': 304, '313': 313, '314': 314, '317': 317, '318': 318,
                        '339': 339, '340': 340, '341': 341, '342': 342, '351': 351,
                        '352': 352, '355': 355, '356': 356, '367': 367, '368': 368,
                        '371': 371, '372': 372, '379': 379, '380': 380, '383': 383,
                        '384': 384, '388': 388, '389': 389, '390': 390, '391': 391,
                        '401': 401, '402': 402, '403': 403, '405': 405, '406': 406,
                        '407': 407, '408': 408, '410': 410, '415': 415, '416': 416,
                        '417': 417, '418': 418, '419': 419, '420': 420, '421': 421,
                        '422': 422, '423': 423, '424': 424, '425': 425, '426': 426,
                        '427': 427, '428': 428, '429': 429, '430': 430, '431': 431,
                        '432': 432, '433': 433, '434': 434, '439': 439, '440': 440,
                        '445': 445, '446': 446, '447': 447, '448': 448, '451': 451,
                        '452': 452, '453': 453, '454': 454, '455': 455, '456': 456,
                        '463': 463, '464': 464, '485': 485, '486': 486, '489': 489,
                        '490': 490, '721': 721, '722': 722, '831': 831, '832': 832,
                        '833': 833, '834': 834, '835': 835, '836': 836, '837': 837,
                        '838': 838, '839': 839, '840': 840, '841': 841, '842': 842,
                        '843': 843, '844': 844, '845': 845, '846': 846, '847': 847,
                        '848': 848, '849': 849, '850': 850, '851': 851, '852': 852,
                        '853': 853, '854': 854, '855': 855, '856': 856, '857': 857,
                        '858': 858, '859': 859, '860': 860, '909': 909, '910': 910,
                        '911': 911, '912': 912, '947': 947, '948': 948, '949': 949,
                        '950': 950, '985': 985, '986': 986, '997': 997, '998': 998,
                        '1115': 1115, '1116': 1116, '1117': 1117, '1118': 1118, '1123': 1123,
                        '1124': 1124, '1129': 1129, '1132': 1132, '4302': 4302, '4303': 4303,
                        '4304': 4304, '4305': 4305, '4306': 4306, '4307': 4307, '4308': 4308,
                        '4309': 4309, '4310': 4310, '4311': 4311, '4312': 4312, '4313': 4313,
                        '4314': 4314, '4315': 4315, '4316': 4316, '4317': 4317, '4320': 4320,
                        '4321': 4321, '4322': 4322, '4323': 4323, '4324': 4324, '4325': 4325,
                        '4326': 4326, '4327': 4327, '4328': 4328, '4329': 4329, '4340': 4340,
                        '4341': 4341, '4342': 4342, '4343': 4343, '4344': 4344, '4345': 4345,
                        '4346': 4346, '4347': 4347, '4380': 4380, '4381': 4381, '4382': 4382,
                        '4383': 4383, '4384': 4384, '4385': 4385, '4386': 4386, '4387': 4387
                    }
                    train_number_display = st.selectbox("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ö‡∏ß‡∏ô‡∏£‡∏ñ‡πÑ‡∏ü", list(train_number_dict.keys()))
                    train_number = train_number_dict[train_number_display]

                    # ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏∫
                    day_of_weeks = {
                        "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": 1,
                        "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": 2,
                        "‡∏û‡∏∏‡∏ò": 3,
                        "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ": 4,
                        "‡∏®‡∏∏‡∏Å‡∏£‡πå": 5,
                        "‡πÄ‡∏™‡∏≤‡∏£‡πå": 6,
                        "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå": 7,
                    }
                    day_of_week_display = st.selectbox("‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", list(day_of_weeks.keys()))
                    day_of_week = day_of_weeks[day_of_week_display]


                # Column ‡∏Ç‡∏ß‡∏≤
                with col2:
                    # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                    travel_date = st.date_input(
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á",
                    )

                    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    departure_time = st.time_input(
                        "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î",

                    )

                    if "arrival_time" not in st.session_state:
                        st.session_state.arrival_time = (datetime.now() + timedelta(minutes=30)).time()

                    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    arrival_time = st.time_input(
                        "‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                        value=st.session_state.arrival_time,
                        key="arrival_time"
                    )

                    # ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                    railway_lines_dict = {
                        "‡∏™‡∏≤‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": 1,
                        "‡∏™‡∏≤‡∏¢‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": 2,
                        "‡∏™‡∏≤‡∏¢‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å": 3,
                        "‡∏™‡∏≤‡∏¢‡πÉ‡∏ï‡πâ": 4,
                        "‡∏ß‡∏á‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏ç‡πà - ‡∏°‡∏´‡∏≤‡∏ä‡∏±‡∏¢": 5,
                        "‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏´‡∏•‡∏° - ‡πÅ‡∏°‡πà‡∏Å‡∏•‡∏≠‡∏á": 6,
                        "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á": 7,
                        "‡∏™‡∏≤‡∏¢‡πÉ‡∏ï‡πâ - ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": 8,
                        "‡∏Ç‡πâ‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ": 9
                    }
                    railway_type_display = st.selectbox("‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÑ‡∏ü", list(railway_lines_dict.keys()))
                    railway_line = railway_lines_dict[railway_type_display]

                    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                    distance = st.number_input(
                        "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏Å‡∏°.)",
                        min_value=31, max_value=1152, value=31
                    )

                    # ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                    num_stations = st.number_input(
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô",
                        min_value=2, max_value=93, value=2
                    )

                    # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                    time_periods = {
                        "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô": 1,
                        "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô": 2,
                    }
                    time_period_display = st.selectbox("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", list(time_periods.keys()))
                    time_period = time_periods[time_period_display]

                if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤"):
                    departure_datetime = datetime.combine(travel_date, departure_time)
                    arrival_datetime = datetime.combine(travel_date, arrival_time)

                    input_data = {
                        'Train_type': train_type,
                        'Maximum_train_speed': max_speed,
                        'Number_of_junctions': num_junctions,
                        'Outbound_trips_Return_trips': outbound_return,
                        'Train_number': train_number,
                        'Date': day_of_week,
                        'Day_Month_Year': travel_date,
                        'Scheduled_departure_time_origin': departure_datetime,
                        'Scheduled_arrival_time_destination': arrival_datetime,
                        'Railway_line': railway_line,
                        'Distance': distance,
                        'Number_of_stations': num_stations,
                        'Time_period': time_period
                    }

                    prediction = predict_single_input(model, label_encoders, input_data, model.feature_names_in_)
                    st.success(f"üïí ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏£‡∏ñ‡πÑ‡∏ü‡∏à‡∏∞‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {prediction:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ")

            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")
                print({e})


    elif page == "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö":
        st.header("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü")
        st.markdown("""
        ## ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Machine Learning ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Random Forest

        ## ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        1. **‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•**: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ‡πÑ‡∏ü ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features ‡πÅ‡∏•‡∏∞ Target ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"
        2. **‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤**: ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤"

        ## ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡πÑ‡∏ü
        - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏ü
        - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å
        - ‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡πÑ‡∏õ/‡∏Å‡∏•‡∏±‡∏ö)
        - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ö‡∏ß‡∏ô‡∏£‡∏ñ‡πÑ‡∏ü
        - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÑ‡∏ü
        - ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
        - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô
        - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤

        ## ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        - Python 3.8+
        - Streamlit
        - Scikit-learn (Random Forest)
        - Pandas
        - Matplotlib & Seaborn

        ## ‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤
        ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ [‡∏Ñ‡∏ô‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏ó‡πà‡πÅ‡∏ö‡∏ö‡∏ú‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏´‡∏•‡∏∞]
        """)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
        st.image("https://via.placeholder.com/800x400.png?text=Thai+Railway+System", caption="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ñ‡πÑ‡∏ü‡πÑ‡∏ó‡∏¢")


if __name__ == "__main__":
    main()
